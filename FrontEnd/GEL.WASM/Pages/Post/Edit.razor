@page "/post/edit/{postId}"
@inject IPostService _postService
@inject NavigationManager _navManager

<h1>Edit Post</h1>
<br />
<hr />
<br />

@if (int.Parse(postId) < 1 || string.IsNullOrWhiteSpace(postId))
{
    <h2>Invalid selection. Please try again!</h2>
}
else if (post == null)
{
    <h2>Loading post details</h2>
}
else
{
    <EditForm Model="post" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText @bind-Value="post.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea @bind-Value="post.Description" class="form-control" id="description" />
        </div>
        <div class="form-group">
            <label for="category-id">Category Id</label>
            <InputNumber @bind-Value="post.CategoryId" class="form-control" id="category-id" />
        </div>
        <div class="form-group">
            <label for="sub-category-id">Sub-Category Id</label>
            <InputNumber @bind-Value="post.SubCategoryId" class="form-control" id="sub-category-id" />
        </div>
        <div class="form-group">
            <label for="slug">Slug</label>
            <InputText @bind-Value="post.Slug" class="form-control" id="slug" />
        </div>
        <div class="form-group">
            <label for="thumbnail">Thumbnail</label>
            <InputText @bind-Value="post.Thumbnail" class="form-control" id="thumbnail" />
        </div>
        <div class="form-group">
            <label for="content">Content</label>
            <InputTextArea @bind-Value="post.Content" class="form-control" id="content" />
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-check"></span>
            Update Post
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public string postId { get; set; }
    private PostDto post = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await _postService.GetPostByIdAsync<ResponseDto>(Convert.ToInt32(postId));
        if (response != null && response.IsSuccess)
        {
            post = JsonConvert.DeserializeObject<PostDto>(response.Result.ToString());
        }
    }

    private async Task HandleUpdate()
    {
        post.UpdatedAt = DateTime.Now;

        var response = await _postService.UpdatePostAsync<ResponseDto>(post);
        if (response != null && response.IsSuccess)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/posts");
    }
}
